#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º —Å Discord API
"""

import asyncio
import aiohttp
import socket
import subprocess
import sys

DISCORD_ENDPOINTS = [
    "discord.com",
    "gateway.discord.gg",
    "gateway-us-east1-c.discord.gg",
    "api.discord.com"
]

DNS_SERVERS = [
    "8.8.8.8",
    "8.8.4.4", 
    "1.1.1.1",
    "208.67.222.222"
]

async def test_dns_resolution():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è Discord —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è ===")
    
    for endpoint in DISCORD_ENDPOINTS:
        try:
            addr_info = socket.getaddrinfo(endpoint, 443)
            ip = addr_info[0][4][0]
            print(f"‚úÖ {endpoint} -> {ip}")
        except socket.gaierror as e:
            print(f"‚ùå {endpoint} -> –û—à–∏–±–∫–∞: {e}")
        except Exception as e:
            print(f"‚ùå {endpoint} -> –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

def test_ping():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç ping –¥–æ DNS —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ping –¥–æ DNS —Å–µ—Ä–≤–µ—Ä–æ–≤ ===")
    
    for dns in DNS_SERVERS:
        try:
            result = subprocess.run(
                ["ping", "-c", "3", dns], 
                capture_output=True, 
                text=True, 
                timeout=10
            )
            if result.returncode == 0:
                print(f"‚úÖ {dns} - –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print(f"‚ùå {dns} - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except subprocess.TimeoutExpired:
            print(f"‚ùå {dns} - —Ç–∞–π–º–∞—É—Ç")
        except Exception as e:
            print(f"‚ùå {dns} - –æ—à–∏–±–∫–∞: {e}")

async def test_http_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç HTTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Discord API"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ===")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ DNS
    connector = aiohttp.TCPConnector(
        resolver=aiohttp.resolver.AsyncResolver(nameservers=DNS_SERVERS),
        ttl_dns_cache=300,
        use_dns_cache=True
    )
    
    timeout = aiohttp.ClientTimeout(total=30)
    
    async with aiohttp.ClientSession(connector=connector, timeout=timeout) as session:
        for endpoint in DISCORD_ENDPOINTS:
            try:
                url = f"https://{endpoint}"
                async with session.get(url) as response:
                    print(f"‚úÖ {url} -> HTTP {response.status}")
            except aiohttp.ClientConnectorDNSError as e:
                print(f"‚ùå {url} -> DNS –æ—à–∏–±–∫–∞: {e}")
            except aiohttp.ClientConnectorError as e:
                print(f"‚ùå {url} -> –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            except asyncio.TimeoutError:
                print(f"‚ùå {url} -> –¢–∞–π–º–∞—É—Ç")
            except Exception as e:
                print(f"‚ùå {url} -> –û—à–∏–±–∫–∞: {e}")

def check_system_dns():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DNS"""
    print("\n=== –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DNS ===")
    
    try:
        with open("/etc/resolv.conf", "r") as f:
            content = f.read()
            print("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ /etc/resolv.conf:")
            print(content)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è /etc/resolv.conf: {e}")

async def main():
    print("üîç –ó–∞–ø—É—Å–∫–∞—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º...\n")
    
    check_system_dns()
    await test_dns_resolution()
    test_ping()
    await test_http_connection()
    
    print("\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DNS –≤ docker-compose.yml")
    print("3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: docker-compose down && docker-compose up")
    print("4. –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ network_mode: host")

if __name__ == "__main__":
    asyncio.run(main())