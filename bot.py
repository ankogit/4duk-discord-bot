import os
import discord
from discord.ext import commands
from discord import FFmpegPCMAudio
from dotenv import load_dotenv
import asyncio
import aiohttp
import logging
import signal
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

load_dotenv()

intents = discord.Intents.default()
intents.message_content = True  # –ù—É–∂–µ–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º
intents.voice_states = True     # –ù—É–∂–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏
intents.guilds = True           # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–µ—Ä–∞–º

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ —Å –ª—É—á—à–∏–º–∏ DNS –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
connector = aiohttp.TCPConnector(
    limit=100,
    limit_per_host=30,
    ttl_dns_cache=300,
    use_dns_cache=True,
    resolver=aiohttp.resolver.AsyncResolver(nameservers=['8.8.8.8', '8.8.4.4', '1.1.1.1'])
)

bot = commands.Bot(
    command_prefix="!",
    intents=intents,
    connector=connector,
    timeout=60.0,
    max_messages=10000
)

RADIO_URL = "http://radio.4duk.ru/4duk128.mp3"
FFMPEG_OPTIONS = {
    'before_options': '-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5',
    'options': '-vn'
}

async def run_bot_with_retry():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    retry_count = 0
    max_retries = 5
    
    while retry_count < max_retries:
        try:
            await bot.start(os.getenv("DISCORD_TOKEN"))
        except (aiohttp.ClientConnectorDNSError, aiohttp.ClientConnectorError, discord.ConnectionClosed) as e:
            retry_count += 1
            wait_time = min(60 * retry_count, 300)  # –ú–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {retry_count}/{max_retries}): {e}")
            logging.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(wait_time)
        except Exception as e:
            logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            break
    
    logging.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")

@bot.event
async def on_ready():
    logging.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {bot.user}")
    print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {bot.user}")

@bot.event
async def on_disconnect():
    logging.warning("–ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç Discord")

@bot.event
async def on_resumed():
    logging.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Discord –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

@bot.command()
async def join(ctx):
    if ctx.author.voice:
        channel = ctx.author.voice.channel
        await channel.connect()
        await ctx.send(f"–ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ {channel.name}")
    else:
        await ctx.send("–¢—ã –Ω–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!")

@bot.command()
async def radio(ctx):
    vc = ctx.voice_client
    if not vc:
        if ctx.author.voice:
            vc = await ctx.author.voice.channel.connect()
        else:
            await ctx.send("–¢—ã –Ω–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!")
            return
    vc.play(FFmpegPCMAudio(RADIO_URL, **FFMPEG_OPTIONS))
    await ctx.send("üéµ –í–µ—â–∞—é —Ä–∞–¥–∏–æ!")

@bot.command()
async def stop(ctx):
    if ctx.voice_client:
        await ctx.voice_client.disconnect()
        await ctx.send("–û—Ç–∫–ª—é—á–∏–ª—Å—è.")
    else:
        await ctx.send("–Ø –Ω–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ.")

@bot.command()
async def ping(ctx):
    await ctx.send("Pong!")

# Graceful shutdown
def signal_handler(signum, frame):
    logging.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –∑–∞–∫—Ä—ã–≤–∞—é –±–æ—Ç–∞...")
    asyncio.create_task(bot.close())
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

if __name__ == "__main__":
    try:
        asyncio.run(run_bot_with_retry())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    finally:
        asyncio.run(bot.close())
